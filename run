#!/bin/bash
source commons.bash

# Parse args
export FILTER_DATASETS=""
export TAGS="latest"
export DOCKER_IMAGE="opendronemap/odm"
export CMD_OPTIONS=""
export CLEAR=NO
export TESTRUN=NO
export NUKE=NO
export USE_LOCAL_VOLUME=NO

POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"
case $key in
    --datasets)
	# Split string using ',' separator
	IFS=',' read -ra DST <<< "$2"
    export FILTER_DATASETS=("${DST[@]}")
    shift # past argument
    shift # past value
    ;;
    --tags)
	# Split string using ',' separator
	IFS=',' read -ra DST <<< "$2"
    export TAGS=("${DST[@]}")
    shift # past argument
    shift # past value
    ;;
	--image_name)
    export DOCKER_IMAGE="$2"
    shift # past argument
    shift # past value
    ;;
    --options)
    export CMD_OPTIONS="$2"
    shift # past argument
    shift # past value
    ;;
    --clear)
    export CLEAR=YES
    shift # past argument
    ;;
    --test)
    export TESTRUN=YES
    shift # past argument
    ;;
	--nuke)
    export NUKE=YES
    shift # past argument
    ;;
	--use_local_volume)
    export USE_LOCAL_VOLUME=YES
    shift # past argument
    ;;
    --help)
    export HELP=YES
    shift # past argument
    ;;
    *)    # unknown option
    POSITIONAL+=("$1") # save it in an array for later
    shift # past argument
    ;;
esac
done
set -- "${POSITIONAL[@]}" # restore positional parameter

usage(){
  echo "Usage: $0 [options] <group>"
  echo
  echo "OpenDroneMap Automated Testing Suite."
  echo
  echo "Group:"
  for group in groups/*.bash; do
  	source $group
  	echo "	$(basename $group .bash)	${DATASETS[@]}"
  done
  echo
  echo "Options:"
  echo "	--datasets <dataset1,dataset2,...>	Test only the specified datasets from the group"
  echo "	--tags	<tag1,tag2,...>	docker tag images to test. Each tag is tested against each dataset. (default: latest)"
  echo "	--options	\"--odm-option 1 --rerun-from odm_meshing ...\"	Options to append to each OpenDroneMap invocation (for example to rerun from a certain step of the pipeline). Make sure to add these in quotes. (default: \"\")"
  echo "	--image_name	<docker image>	Docker image to use. (default: opendronemap/odm)"
  echo "	--use_local_volume	Copy dataset inputs to a temporary location within the docker container instead of directly binding to the host directory. Windows users should use this option to avoid having tests failing due to missing files. (default: no)"
  echo "	--clear	Delete previous test results. (default: no)"
  echo "	--test	Do not execute docker commands, but simply write them in oats.log. (default: no)"
  echo "	--nuke	Clear test results, datasets files and any other file in the workspace. (default: no)"
  exit
}

environment_check(){
	check_command "docker" "https://www.docker.com/"
	check_command "wget" "Run \033[1msudo apt install -y wget\033[0m" "sudo apt install -y wget"
	check_command "git" "Run \033[1msudo apt install -y git\033[0m" "sudo apt install -y git"
	check_command "rsync" "Run \033[1msudo apt install -y rsync\033[0m" "sudo apt install -y rsync"
	check_command "sed" "Run \033[1msudo apt install -y sed\033[0m" "sudo apt install -y sed"
	check_command "unzip" "Run \033[1msudo apt install -y unzip\033[0m" "sudo apt install -y unzip"
}

build_tests(){
	rm -f tests/build/*.bats

	# Create test files for each tag
	# Split string using ',' separator
	for tag in "${TAGS[@]}"; do
		for test_file in tests/*.oat; do
			[ -e "$test_file" ] || continue
			test_basename=$(basename $test_file .oat)
			out_file="tests/build/$test_basename""_$tag.bats"

			# Header
			echo "load functions" > $out_file

			# Replace calls to $run_test with run_test appended by a tag parameter
			sed "s/\$run_test\(.*\)/run_test\1 \"$tag\"/g" $test_file >> $out_file

			# Add BATS_TEST_BASENAME to each test case description
			#sed -i.bak "s/@test \"\(.*\)\"/@test \"\1 (\$BATS_BASENAME\)\"/g" $out_file
		done
	done

	#rm tests/build/*.bak
	cp functions.bash tests/build/
}

if [ ! -e ./bats ]; then
	git clone --depth 1 https://github.com/sstephenson/bats.git
fi

environment_check

if [ "$HELP" == "YES" ]; then
	usage
fi

if [ "$NUKE" == "YES" ]; then
	rm -vfr results/* datasets/* tests/build/*
	exit 0
fi

# Path to bats executable
BATS=./bats/bin/bats

if [ ! -e "$BATS" ]; then
	echo "Bats not found: $BATS"
	exit 1
fi

# Clean previous logs
rm -f *.log

build_tests

# Get datasets group
if [ -e "groups/$POSITIONAL.bash" ]; then
	get_datasets_for_group "$POSITIONAL" "${FILTER_DATASETS[@]}"

	for dataset in "${datasets[@]}"; do
		if [ -e tests/$dataset.oat ]; then
			# For each tag
			for test_file in $(echo "tests/build/$dataset""_*.bats"); do
				main() {
				echo
				echo Begin dataset: $dataset
				printf '%0.s-' $(seq 1 $COLUMNS)
				echo Free Memory: $(awk '/MemFree/ { printf "%.3f \n", $2/1024/1024 }' /proc/meminfo)GB
				echo Free SWAP: $(awk '/SwapFree/ { printf "%.3f \n", $2/1024/1024 }' /proc/meminfo)GB
				printf '%0.s-' $(seq 1 $COLUMNS)
				echo
				[ -e "$test_file" ] || continue
				$BATS $test_file
				echo
				echo End dataset: $dataset
				printf '%0.s-' $(seq 1 $COLUMNS)
				echo Free Memory: $(awk '/MemFree/ { printf "%.3f \n", $2/1024/1024 }' /proc/meminfo)GB
				echo Free SWAP: $(awk '/SwapFree/ { printf "%.3f \n", $2/1024/1024 }' /proc/meminfo)GB
				}
				time main
				printf '%0.s=' $(seq 1 $COLUMNS)
				printf '%0.s=' $(seq 1 $COLUMNS)
				echo
				echo
			done
		else
			echo "WARNING: tests/$dataset.oat does not exist. Ignoring."
		fi
	done
else
	usage
fi
